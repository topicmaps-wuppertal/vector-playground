{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["host","getGazData","setGazData","a","prefix","sources","md5FetchText","adressen","bezirke","quartiere","pois","kitas","gazData","getGazDataForTopicIds","App","useState","useEffect","TopicMapContextProvider","appKey","backgroundConfigurations","stadtplan","layerkey","src","title","lbk","vector1","vector2","backgroundModes","mode","layerKey","referenceSystem","MappingConstants","crs3857","referenceSystemDefinition","proj4crs3857def","TopicMapComponent","maxZoom","locatorControl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uXAkBMA,EAAO,wCAEPC,EAAU,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACXC,EAAS,oBACTC,EAAU,GAFC,SAIQC,YAAaF,EAAQJ,EAAO,uBAJpC,cAIjBK,EAAQE,SAJS,gBAKOD,YAAaF,EAAQJ,EAAO,sBALnC,cAKjBK,EAAQG,QALS,iBAMSF,YAAaF,EAAQJ,EAAO,wBANrC,eAMjBK,EAAQI,UANS,iBAOIH,YAAaF,EAAQJ,EAAO,mBAPhC,eAOjBK,EAAQK,KAPS,iBAQKJ,YAAaF,EAAQJ,EAAO,oBARjC,QAQjBK,EAAQM,MARS,OAUXC,EAAUC,YAAsBR,EAAS,CAC7C,OACA,QACA,UACA,YACA,aAGFH,EAAWU,GAlBM,4CAAH,sDA+EDE,MA1Df,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNH,EADM,KACGV,EADH,KA6Cb,OA3CAc,qBAAU,WACRf,EAAWC,KACV,IA0CD,cAACe,EAAA,EAAD,CACEC,OAAO,qCACPC,yBA3C6B,CAC/BC,UAAW,CACTC,SAAU,oBACVC,IAAK,yCACLC,MAAO,aAETC,IAAK,CACHH,SAAU,2CACVC,IAAK,uCACLC,MAAO,iBAETE,QAAS,CACPJ,SAAU,2BACVC,IAAK,yCACLC,MAAO,aAETG,QAAS,CACPL,SAAU,qBACVC,IAAK,yCACLC,MAAO,cAyBPI,gBAtBoB,CACtB,CACEJ,MAAO,2CACPK,KAAM,UACNC,SAAU,WAEZ,CACEN,MAAO,qCACPK,KAAM,UACNC,SAAU,WAEZ,CACEN,MAAO,iCACPK,KAAM,UACNC,SAAU,aAEZ,CAAEN,MAAO,gBAAiBK,KAAM,UAAWC,SAAU,QAOnDC,gBAAiBC,IAAiBC,QAClCC,0BAA2BF,IAAiBG,gBAL9C,SAOE,cAACC,EAAA,EAAD,CAAmBC,QAAS,GAAIxB,QAASA,EAASyB,gBAAgB,OClFzDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ae445a68.chunk.js","sourcesContent":["import { useEffect } from \"react\";\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport { md5FetchText, fetchJSON } from \"react-cismap/tools/fetching\";\nimport { getGazDataForTopicIds } from \"react-cismap/tools/gazetteerHelper\";\n\nimport TopicMapContextProvider from \"react-cismap/contexts/TopicMapContextProvider\";\nimport { getClusterIconCreatorFunction } from \"react-cismap/tools/uiHelper\";\nimport TopicMapComponent from \"react-cismap/topicmaps/TopicMapComponent\";\nimport FeatureCollection from \"react-cismap/FeatureCollection\";\nimport GenericInfoBoxFromFeature from \"react-cismap/topicmaps/GenericInfoBoxFromFeature\";\nimport getGTMFeatureStyler from \"react-cismap/topicmaps/generic/GTMStyler\";\nimport { MappingConstants } from \"react-cismap\";\nconst host = \"https://wupp-topicmaps-data.cismet.de\";\n\nconst getGazData = async (setGazData) => {\n  const prefix = \"GazDataForStories\";\n  const sources = {};\n\n  sources.adressen = await md5FetchText(prefix, host + \"/data/adressen.json\");\n  sources.bezirke = await md5FetchText(prefix, host + \"/data/bezirke.json\");\n  sources.quartiere = await md5FetchText(prefix, host + \"/data/quartiere.json\");\n  sources.pois = await md5FetchText(prefix, host + \"/data/pois.json\");\n  sources.kitas = await md5FetchText(prefix, host + \"/data/kitas.json\");\n\n  const gazData = getGazDataForTopicIds(sources, [\n    \"pois\",\n    \"kitas\",\n    \"bezirke\",\n    \"quartiere\",\n    \"adressen\",\n  ]);\n\n  setGazData(gazData);\n};\n\nfunction App() {\n  const [gazData, setGazData] = useState([]);\n  useEffect(() => {\n    getGazData(setGazData);\n  }, []);\n  const backgroundConfigurations = {\n    stadtplan: {\n      layerkey: \"wupp-plan-live@90\",\n      src: \"/images/rain-hazard-map-bg/citymap.png\",\n      title: \"Stadtplan\",\n    },\n    lbk: {\n      layerkey: \"trueOrtho2020@75|OMT_Klokantech_basic@50\",\n      src: \"/images/rain-hazard-map-bg/ortho.png\",\n      title: \"Luftbildkarte\",\n    },\n    vector1: {\n      layerkey: \"OMT_Klokantech_basic@100\",\n      src: \"/images/rain-hazard-map-bg/citymap.png\",\n      title: \"Stadtplan\",\n    },\n    vector2: {\n      layerkey: \"OMT_OSM_bright@100\",\n      src: \"/images/rain-hazard-map-bg/citymap.png\",\n      title: \"Stadtplan\",\n    },\n  };\n  const backgroundModes = [\n    {\n      title: \"Vektorbasierter Layer (Klokantech Basic)\",\n      mode: \"default\",\n      layerKey: \"vector1\",\n    },\n    {\n      title: \"Vektorbasierter Layer (OSM bright)\",\n      mode: \"default\",\n      layerKey: \"vector2\",\n    },\n    {\n      title: \"Stadtplan (RVR, zum Vergleich)\",\n      mode: \"default\",\n      layerKey: \"stadtplan\",\n    },\n    { title: \"Luftbildkarte\", mode: \"default\", layerKey: \"lbk\" },\n  ];\n  return (\n    <TopicMapContextProvider\n      appKey='VectorPlaygroundWuppertal.TopicMap'\n      backgroundConfigurations={backgroundConfigurations}\n      backgroundModes={backgroundModes}\n      referenceSystem={MappingConstants.crs3857}\n      referenceSystemDefinition={MappingConstants.proj4crs3857def}\n    >\n      <TopicMapComponent maxZoom={22} gazData={gazData} locatorControl={true}></TopicMapComponent>\n    </TopicMapContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}